import chokidar from 'chokidar';
import Emittery from 'emittery';
import { WatcherEvents } from './Contracts';
/**
 * Exposes the API to watch source files using chokidar. Since this module
 * is anyways used by the assembler, we also expose the chokidar API directly
 */
export declare class ChokidarWatcher extends Emittery.Typed<WatcherEvents, 'watcher:ready'> {
    private cwd;
    chokidar: chokidar.FSWatcher;
    constructor(cwd: string);
    /**
     * Returns a boolean telling if it is a script file or not.
     *
     * We check for the `compilerOptions.allowJs` before marking
     * `.js` files as a script files.
     */
    private isScriptFile;
    /**
     * Initiates chokidar watcher
     */
    private initiateWatcher;
    /**
     * Invoked when chokidar notifies for a new file addtion
     */
    private onNewFile;
    /**
     * Invoked when chokidar notifies for changes the existing
     * source file
     */
    private onChange;
    /**
     * Invoked when chokidar notifies for file deletion
     */
    private onRemove;
    /**
     * Build and watch project for changes
     */
    watch(watchPattern?: string | string[], watcherOptions?: chokidar.WatchOptions): void;
}
