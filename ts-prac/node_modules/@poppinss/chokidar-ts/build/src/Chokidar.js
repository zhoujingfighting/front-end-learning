"use strict";
/*
 * @poppinss/chokidar-ts
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChokidarWatcher = void 0;
const debug_1 = __importDefault(require("debug"));
const chokidar_1 = __importDefault(require("chokidar"));
const emittery_1 = __importDefault(require("emittery"));
const debug = debug_1.default('tsc:watcher');
/**
 * Exposes the API to watch source files using chokidar. Since this module
 * is anyways used by the assembler, we also expose the chokidar API directly
 */
class ChokidarWatcher extends emittery_1.default.Typed {
    constructor(cwd) {
        super();
        this.cwd = cwd;
        debug('initiating watcher');
    }
    /**
     * Returns a boolean telling if it is a script file or not.
     *
     * We check for the `compilerOptions.allowJs` before marking
     * `.js` files as a script files.
     */
    isScriptFile(filePath) {
        return filePath.endsWith('.ts') || filePath.endsWith('.tsx');
    }
    /**
     * Initiates chokidar watcher
     */
    initiateWatcher(watchPattern = ['.'], watcherOptions) {
        watcherOptions = Object.assign({
            ignored: ['node_modules/**', /(^|[\/\\])\../],
            cwd: this.cwd,
            ignoreInitial: true,
        }, watcherOptions);
        debug('initiating watcher with %j options', watcherOptions);
        this.chokidar = chokidar_1.default.watch(watchPattern, watcherOptions);
    }
    /**
     * Invoked when chokidar notifies for a new file addtion
     */
    onNewFile(filePath) {
        if (!this.isScriptFile(filePath)) {
            debug('new file added "%s"', filePath);
            this.emit('add', filePath);
            return;
        }
        debug('new source file added "%s"', filePath);
        this.emit('source:add', filePath);
    }
    /**
     * Invoked when chokidar notifies for changes the existing
     * source file
     */
    onChange(filePath) {
        if (!this.isScriptFile(filePath)) {
            debug('file changed "%s"', filePath);
            this.emit('change', filePath);
            return;
        }
        debug('source file changed "%s"', filePath);
        this.emit('source:change', filePath);
    }
    /**
     * Invoked when chokidar notifies for file deletion
     */
    onRemove(filePath) {
        if (!this.isScriptFile(filePath)) {
            debug('file removed "%s"', filePath);
            this.emit('unlink', filePath);
            return;
        }
        /**
         * Notify subscribers
         */
        debug('source file removed "%s"', filePath);
        this.emit('source:unlink', filePath);
    }
    /**
     * Build and watch project for changes
     */
    watch(watchPattern = ['.'], watcherOptions) {
        this.initiateWatcher(watchPattern, watcherOptions);
        this.chokidar.on('ready', () => {
            debug('watcher ready');
            this.emit('watcher:ready');
        });
        this.chokidar.on('add', (path) => this.onNewFile(path));
        this.chokidar.on('change', (path) => this.onChange(path));
        this.chokidar.on('unlink', (path) => this.onRemove(path));
    }
}
exports.ChokidarWatcher = ChokidarWatcher;
