{"version":3,"sources":["webpack://electron-app/../json/src/browser/abstract-view-contribution.tsx","webpack://electron-app/../json/src/browser/editor-menu-contribution.ts","webpack://electron-app/../json/src/browser/json-contribution.ts","webpack://electron-app/../json/src/browser/json-frontend-module.ts","webpack://electron-app/../json/src/browser/self-widget.tsx","webpack://electron-app/../json/src/browser/widgetopen-contribution.ts","webpack://electron-app/../json/src/browser/widgetopen-hander.tsx","webpack://electron-app/../json/src/common/protocol.ts"],"names":[],"mappings":"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","file":"json_lib_browser_json-frontend-module_js.bundle.js","sourcesContent":["import { injectable } from \"inversify\";\nimport { Command,CommandRegistry,MenuModelRegistry } from \"@theia/core\";\nimport { SelfWidget } from './self-widget'\nimport { AbstractViewContribution,bindViewContribution,CommonMenus, FrontendApplicationContribution, WidgetFactory } from \"@theia/core/lib/browser\";\nimport { interfaces } from \"@theia/core/shared/inversify\";\nimport { GettingStartedWidget } from \"./getting-started\";\nconst TestCommand: Command = {\n\tid:'test',\n\tlabel:'test'\n}\n\n@injectable()\nexport class WidgetContribution extends AbstractViewContribution<SelfWidget>{\n\t//基础的\n\tconstructor(){\n\t\tsuper({\n\t\t\twidgetId:SelfWidget.ID,\n\t\t\twidgetName:SelfWidget.LABEL,\n\t\t\tdefaultWidgetOptions:{area:'main'},\n\t\t\ttoggleCommandId:SelfWidget.ID\n\t\t})\n\t}\n\t//通过改写registerCommands方法，绑定其他命令\n\tregisterCommands(commands:CommandRegistry){\n\t\tsuper.registerCommands(commands)\n\t\tcommands.registerCommand(TestCommand ,{\n\t\t\texecute:() => console.log(1)\n\t\t})\n\t}\n\t//通过改写registerMenus方法，绑定其他菜单项\n\tasync registerMenus(menus:MenuModelRegistry){\n\t\tsuper.registerMenus(menus)\n\t\tmenus.registerMenuAction(CommonMenus.VIEW,{\n\t\t\tcommandId:TestCommand.id,\n\t\t\tlabel:TestCommand.label\n\t\t})\n\t}\n\t// @postConstruct()\n\t// //可以立即执行\n\t// getProjectPath():URI | undefined{\n\t// \tconsole.log(23123)\n\t// \treturn this.workspaceService.workspace?.resource \n\t// }\n}\n\n\nexport const bindWidgetContribution = (bind: interfaces.Bind) => {\n\tbindViewContribution(bind,WidgetContribution)\n\tbind(FrontendApplicationContribution).toService(WidgetContribution)\n\tbind(SelfWidget).toSelf()\n\tbind(WidgetFactory).toDynamicValue(ctx => ({\n\t\tid: SelfWidget.ID,\n\t\tcreateWidget:() => {\n\t\t\treturn ctx.container.get<SelfWidget>(SelfWidget)\n\t\t}\n\t})).inSingletonScope()\n}\n","import { injectable } from \"inversify\";\nimport { MenuContribution,MenuModelRegistry,MAIN_MENU_BAR, CommandContribution, CommandRegistry, Command } from \"@theia/core\";\n\n// export const EDITOR_CONTEXT_MENU: MenuPath= ['editor_context_menu'];\n// export namespace EditorContextMenu {\n//     export const NAVIGATION = [...EDITOR_CONTEXT_MENU, 'navigation'];\n//     export const MODIFICATION = [...EDITOR_CONTEXT_MENU, '1_modification'];\n//     export const CUT_COPY_PASTE = [...EDITOR_CONTEXT_MENU, '9_cutcopypaste'];\n//     export const COMMANDS = [...EDITOR_CONTEXT_MENU, 'z_commands'];\n//     export const UNDO_REDO = [...EDITOR_CONTEXT_MENU, '1_undo'];\n// }\nconst SampleCommand: Command = {\n    id: 'sample-command',\n    label: 'Sample Command'\n};\nconst SampleCommand2: Command = {\n    id: 'sample-command2',\n    label: 'Sample Command2'\n};\n\nexport namespace EditorMainMenu {\n\t/**\n\t * The main 'exmaple' menu\n\t */\n\texport const EXAMPLE = [...MAIN_MENU_BAR,'example']\n\n\texport const NAVIGATION_GROUP = [...EXAMPLE,'submenu']\n}\n@injectable()\nexport class EditorMenuContribution implements MenuContribution {\n\tregisterMenus(registry:MenuModelRegistry):void{\n\t\tregistry.registerSubmenu(EditorMainMenu.EXAMPLE,'Zhoujing',{\n\t\t\torder: '2'\n\t\t\t//这里是决定这个菜单选项的位置选项\n\t\t})\n\t\tregistry.registerMenuAction(EditorMainMenu.EXAMPLE,{\n\t\t\tcommandId:SampleCommand.id,\n\t\t\torder:'0'\n\t\t})\n\t\tregistry.registerMenuAction(EditorMainMenu.EXAMPLE,{\n\t\t\tcommandId:SampleCommand2.id,\n\t\t\torder:'2'\n\t\t})\n\t\t/**\n\t\t * @order 是为了确定每个菜单选项的顺序\n\t\t * \n\t\t */\n\t\t// registry.registerMenuAction(EditorMainMenu.EXAMPLE,{\n\t\t// \tcommandId:common.expample2.id,\n\t\t// \torder:'2'\n\t\t// })\n\t\t// registry.registerMenuAction(EditorMainMenu.EXAMPLE,{\n\t\t// \tcommandId:common.expample3.id,\n\t\t// \torder:'4'\n\t\t// })\n\t\t//把子菜单注册上去\n\t\tregistry.registerSubmenu(EditorMainMenu.NAVIGATION_GROUP,'subSubMenu',{order:'2'})\n\t\tregistry.registerMenuAction(EditorMainMenu.NAVIGATION_GROUP,{\n\t\t\tcommandId: SampleCommand.id,\n\t\t\tlabel:SampleCommand.label,\n\t\t\torder:'4'\n\t\t})\n\t\tregistry.registerMenuAction(EditorMainMenu.NAVIGATION_GROUP,{\n\t\t\tcommandId: SampleCommand2.id,\n\t\t\tlabel: SampleCommand2.label,\n\t\t\torder:'3'\n\t\t})\n\t}\n\t\n}\n@injectable()\nexport class EditorCommandContribution implements CommandContribution{\n\t\n\tregisterCommands(registry:CommandRegistry):void{\n\t\tregistry.registerCommand(SampleCommand,{\n\t\t\texecute:() => console.log(1)\n\t\t})\n\t\tregistry.registerCommand(SampleCommand2,{\n\t\t\texecute:() => console.log(2)\n\t\t})\n\t}\n\t\n}","import { Command, CommandContribution, CommandRegistry} from '@theia/core/lib/common';\nimport { inject, injectable } from 'inversify';\nimport { HelloBackendWithClientService, HelloBackendService } from '../common/protocol';\n\nconst SayHelloViaBackendCommandWithCallBack: Command = {\n    id: 'sayHelloOnBackendWithCallBack.command',\n    label: 'Say hello on the backend with a callback to the client',\n};\n\nconst SayHelloViaBackendCommand: Command = {\n    id: 'sayHelloOnBackend.command',\n    label: 'Say hello on the backend',\n};\n\n@injectable()\nexport class JsonCommandContribution implements CommandContribution {\n\n    constructor(\n        @inject(HelloBackendWithClientService) private readonly helloBackendWithClientService: HelloBackendWithClientService,\n        @inject(HelloBackendService) private readonly helloBackendService: HelloBackendService,\n    ) { }\n\n    registerCommands(registry: CommandRegistry): void {\n        registry.registerCommand(SayHelloViaBackendCommandWithCallBack, {\n            execute: () => this.helloBackendWithClientService.greet().then(r => console.log(r))\n        });\n        registry.registerCommand(SayHelloViaBackendCommand, {\n            execute: () => this.helloBackendService.sayHelloTo('World').then(r => console.log(r))\n        });\n    }\n}\n","import { CommandContribution, MenuContribution} from '@theia/core';\nimport { bindViewContribution, FrontendApplicationContribution, OpenHandler, WebSocketConnectionProvider, WidgetFactory } from \"@theia/core/lib/browser\";\nimport { ContainerModule, injectable } from \"inversify\";\nimport { BackendClient, HelloBackendWithClientService, HelloBackendService, HELLO_BACKEND_PATH, HELLO_BACKEND_WITH_CLIENT_PATH } from '../common/protocol';\nimport { JsonCommandContribution} from './json-contribution';\nimport { SelfWidget } from './self-widget';\nimport { bindWidgetContribution, WidgetContribution } from './abstract-view-contribution';\nimport { bindingCustomOpenHandler, CustomOpenHandler } from './widgetopen-contribution';\nimport { CustonmWidget } from './widgetopen-hander';\nimport { EditorCommandContribution, EditorMenuContribution } from './editor-menu-contribution';\nimport { bindingGettingStarted } from './getting-started-contribution';\nexport default new ContainerModule(bind => {\n    bindingGettingStarted(bind)\n    bindingCustomOpenHandler(bind)\n    bindWidgetContribution(bind)\n\n    bind(MenuContribution).toService(EditorMenuContribution)\n    bind(EditorMenuContribution).toSelf().inSingletonScope()\n    bind(CommandContribution).to(EditorCommandContribution).inSingletonScope()\n\n\n\n\n\n    bind(CommandContribution).to(JsonCommandContribution).inSingletonScope();\n    bind(BackendClient).to(BackendClientImpl).inSingletonScope();\n\n    bind(HelloBackendService).toDynamicValue(ctx => {\n        const connection = ctx.container.get(WebSocketConnectionProvider);\n        return connection.createProxy<HelloBackendService>(HELLO_BACKEND_PATH);\n    }).inSingletonScope();\n\n    bind(HelloBackendWithClientService).toDynamicValue(ctx => {\n        const connection = ctx.container.get(WebSocketConnectionProvider);\n        const backendClient: BackendClient = ctx.container.get(BackendClient);\n        return connection.createProxy<HelloBackendWithClientService>(HELLO_BACKEND_WITH_CLIENT_PATH, backendClient);\n    }).inSingletonScope();\n});\n\n@injectable()\nclass BackendClientImpl implements BackendClient {\n    getName(): Promise<string> {\n        return new Promise(resolve => resolve('Client'));\n    }\n}\n/**\n * \n * \n * \n * \n * \n * \n *  */                     ","import * as React from 'react'\nimport { injectable,postConstruct } from 'inversify'\nimport { ReactWidget } from '@theia/core/lib/browser'\n//自定义接口\n\n@injectable()\nexport class SelfWidget extends ReactWidget{\n\tstatic readonly ID = 'test:widget'\n\tstatic readonly LABEL = 'Self widget'\n\tstatic readonly TOGGLR_COMMAND_ID = 'self.widget'\n\n\t@postConstruct()\n\tprotected async init():Promise<void>{\n\t\t//初始化\n\t\tthis.id = SelfWidget.ID\n\t\tthis.title.label = SelfWidget.LABEL\n\t\tthis.title.caption = SelfWidget.LABEL\n\t\tthis.title.closable = true\n\t\tthis.title.iconClass = 'fa fa-window-maximize'\n\t\tthis.update()//更新\t视图\n\t}\n\t//\n\tprotected render():React.ReactNode{\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t自定义视图\n\t\t\t\t<h1>\n\t\t\t\t\t你好李焕英\n\t\t\t\t</h1>\n\t\t\t</div>\n\t\t\t\n\t\t)\n\t}\n}\n//这里是自定义widget","import { injectable } from \"inversify\";\nimport { WidgetOpenHandler,WidgetOpenerOptions, OpenHandler, WidgetFactory, bindViewContribution } from \"@theia/core/lib/browser\";\nimport { CustonmWidget } from \"./widgetopen-hander\";\nimport URI from \"@theia/core/lib/common/uri\";\nimport { interfaces } from \"@theia/core/shared/inversify\";\n\nexport interface CustomWidgetOptions {\n    text: string;\n}\n\n@injectable()\nexport class CustomOpenHandler extends WidgetOpenHandler<CustonmWidget>{\n\treadonly id = CustonmWidget.ID\n\tcanHandle(uri:URI):number{\n\t\tconsole.log(uri.path.ext)\n\t\tif(uri.path.ext === '.json'){\n\t\t\treturn 500\n\t\t}else{\n\t\t\treturn 0\n\t\t}\n\t}\n\t//这里设置传递给widget的参数\n\tcreateWidgetOptions(uir:URI,options?:WidgetOpenerOptions):CustomWidgetOptions{\n\t\treturn {\n\t\t\ttext:'这是JSON文件'\n\t\t}\n\t}\n}\n\nexport const bindingCustomOpenHandler = (bind: interfaces.Bind) => {\n\tbind(OpenHandler).toService(CustomOpenHandler)\n    bind(CustomOpenHandler).toSelf().inSingletonScope()\n    bind(CustonmWidget).toSelf()\n\n\tbind(WidgetFactory).toDynamicValue(ctx => ({\n        id: CustonmWidget.ID,\n        createWidget: () => {\n            const widget = ctx.container.get<CustonmWidget>(CustonmWidget);\n            // widget.setText(options.text);\n            return widget\n        }\n    })).inSingletonScope();\n}","import * as React from 'react'\nimport { injectable, postConstruct } from 'inversify'\nimport { ReactWidget } from '@theia/core/lib/browser'\n@injectable()\nexport class CustonmWidget extends ReactWidget{\n\tstatic readonly ID = 'test:widget'\n\tstatic readonly LABEL = 'Custom Editor'\n\tprotected text: string\t\n \n\t@postConstruct()\n\tprotected async init():Promise<void>{\n\t\tthis.id = CustonmWidget.ID\n\t\tthis.title.label = CustonmWidget.LABEL\n\t\tthis.title.closable = true\n\t\tthis.title.iconClass = 'fa fa-window-maximize'//exmaple widget icon\n\t\tthis.update()//更新视图\n\t}\n\tsetText(text:string){\n\t\tthis.text = text\n\t}\n\tprotected render():React.ReactNode{\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<div>自定义编辑器</div>\n\t\t\t\t<div>{this.text}</div>\n\t\t\t</React.Fragment>\n\t\t)\n\t}\n}\n","import { JsonRpcServer } from '@theia/core/lib/common/messaging';\n\nexport const HelloBackendService = Symbol('HelloBackendService');\nexport const HELLO_BACKEND_PATH = '/services/helloBackend';\n\nexport interface HelloBackendService {\n    sayHelloTo(name: string): Promise<string>\n}\nexport const HelloBackendWithClientService = Symbol('BackendWithClient');\nexport const HELLO_BACKEND_WITH_CLIENT_PATH = '/services/withClient';\n\nexport interface HelloBackendWithClientService extends JsonRpcServer<BackendClient> {\n    greet(): Promise<string>\n}\nexport const BackendClient = Symbol('BackendClient');\nexport interface BackendClient {\n    getName(): Promise<string>;\n}\n"],"sourceRoot":""}